// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_streamplayer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_streamplayer.proto</summary>
public static partial class SteammessagesStreamplayerReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_streamplayer.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesStreamplayerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiBzdGVhbW1lc3NhZ2VzX3N0cmVhbXBsYXllci5wcm90byKvAgoTQ1N0cmVh",
          "bVBsYXllckNvbmZpZxI3CgxhdWRpb19jb25maWcYASABKAsyIS5DU3RyZWFt",
          "UGxheWVyQ29uZmlnLkNBdWRpb0NvbmZpZxI8ChFtaWNyb3Bob25lX2NvbmZp",
          "ZxgCIAEoCzIhLkNTdHJlYW1QbGF5ZXJDb25maWcuQ0F1ZGlvQ29uZmlnEiEK",
          "GWNvbnRyb2xsZXJfb3ZlcmxheV9vcGVuZWQYBCABKAgSHgoWbWVudWJhcl9v",
          "dmVybGF5X29wZW5lZBgFIAEoCBIeChZtZW51YmFyX292ZXJsYXlfaG90a2V5",
          "GAYgASgNGj4KDENBdWRpb0NvbmZpZxIRCgZ2b2x1bWUYASABKAI6ATESDAoE",
          "bXV0ZRgCIAEoCBINCgVib29zdBgDIAEoCA=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CStreamPlayerConfig), global::CStreamPlayerConfig.Parser, new[]{ "AudioConfig", "MicrophoneConfig", "ControllerOverlayOpened", "MenubarOverlayOpened", "MenubarOverlayHotkey" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CStreamPlayerConfig.Types.CAudioConfig), global::CStreamPlayerConfig.Types.CAudioConfig.Parser, new[]{ "Volume", "Mute", "Boost" }, null, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CStreamPlayerConfig : pb::IMessage<CStreamPlayerConfig>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CStreamPlayerConfig> _parser = new pb::MessageParser<CStreamPlayerConfig>(() => new CStreamPlayerConfig());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CStreamPlayerConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesStreamplayerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CStreamPlayerConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CStreamPlayerConfig(CStreamPlayerConfig other) : this() {
    _hasBits0 = other._hasBits0;
    audioConfig_ = other.audioConfig_ != null ? other.audioConfig_.Clone() : null;
    microphoneConfig_ = other.microphoneConfig_ != null ? other.microphoneConfig_.Clone() : null;
    controllerOverlayOpened_ = other.controllerOverlayOpened_;
    menubarOverlayOpened_ = other.menubarOverlayOpened_;
    menubarOverlayHotkey_ = other.menubarOverlayHotkey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CStreamPlayerConfig Clone() {
    return new CStreamPlayerConfig(this);
  }

  /// <summary>Field number for the "audio_config" field.</summary>
  public const int AudioConfigFieldNumber = 1;
  private global::CStreamPlayerConfig.Types.CAudioConfig audioConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CStreamPlayerConfig.Types.CAudioConfig AudioConfig {
    get { return audioConfig_; }
    set {
      audioConfig_ = value;
    }
  }

  /// <summary>Field number for the "microphone_config" field.</summary>
  public const int MicrophoneConfigFieldNumber = 2;
  private global::CStreamPlayerConfig.Types.CAudioConfig microphoneConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CStreamPlayerConfig.Types.CAudioConfig MicrophoneConfig {
    get { return microphoneConfig_; }
    set {
      microphoneConfig_ = value;
    }
  }

  /// <summary>Field number for the "controller_overlay_opened" field.</summary>
  public const int ControllerOverlayOpenedFieldNumber = 4;
  private readonly static bool ControllerOverlayOpenedDefaultValue = false;

  private bool controllerOverlayOpened_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerOverlayOpened {
    get { if ((_hasBits0 & 1) != 0) { return controllerOverlayOpened_; } else { return ControllerOverlayOpenedDefaultValue; } }
    set {
      _hasBits0 |= 1;
      controllerOverlayOpened_ = value;
    }
  }
  /// <summary>Gets whether the "controller_overlay_opened" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerOverlayOpened {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "controller_overlay_opened" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerOverlayOpened() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "menubar_overlay_opened" field.</summary>
  public const int MenubarOverlayOpenedFieldNumber = 5;
  private readonly static bool MenubarOverlayOpenedDefaultValue = false;

  private bool menubarOverlayOpened_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MenubarOverlayOpened {
    get { if ((_hasBits0 & 2) != 0) { return menubarOverlayOpened_; } else { return MenubarOverlayOpenedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      menubarOverlayOpened_ = value;
    }
  }
  /// <summary>Gets whether the "menubar_overlay_opened" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMenubarOverlayOpened {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "menubar_overlay_opened" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMenubarOverlayOpened() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "menubar_overlay_hotkey" field.</summary>
  public const int MenubarOverlayHotkeyFieldNumber = 6;
  private readonly static uint MenubarOverlayHotkeyDefaultValue = 0;

  private uint menubarOverlayHotkey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MenubarOverlayHotkey {
    get { if ((_hasBits0 & 4) != 0) { return menubarOverlayHotkey_; } else { return MenubarOverlayHotkeyDefaultValue; } }
    set {
      _hasBits0 |= 4;
      menubarOverlayHotkey_ = value;
    }
  }
  /// <summary>Gets whether the "menubar_overlay_hotkey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMenubarOverlayHotkey {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "menubar_overlay_hotkey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMenubarOverlayHotkey() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CStreamPlayerConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CStreamPlayerConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AudioConfig, other.AudioConfig)) return false;
    if (!object.Equals(MicrophoneConfig, other.MicrophoneConfig)) return false;
    if (ControllerOverlayOpened != other.ControllerOverlayOpened) return false;
    if (MenubarOverlayOpened != other.MenubarOverlayOpened) return false;
    if (MenubarOverlayHotkey != other.MenubarOverlayHotkey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (audioConfig_ != null) hash ^= AudioConfig.GetHashCode();
    if (microphoneConfig_ != null) hash ^= MicrophoneConfig.GetHashCode();
    if (HasControllerOverlayOpened) hash ^= ControllerOverlayOpened.GetHashCode();
    if (HasMenubarOverlayOpened) hash ^= MenubarOverlayOpened.GetHashCode();
    if (HasMenubarOverlayHotkey) hash ^= MenubarOverlayHotkey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (audioConfig_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AudioConfig);
    }
    if (microphoneConfig_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MicrophoneConfig);
    }
    if (HasControllerOverlayOpened) {
      output.WriteRawTag(32);
      output.WriteBool(ControllerOverlayOpened);
    }
    if (HasMenubarOverlayOpened) {
      output.WriteRawTag(40);
      output.WriteBool(MenubarOverlayOpened);
    }
    if (HasMenubarOverlayHotkey) {
      output.WriteRawTag(48);
      output.WriteUInt32(MenubarOverlayHotkey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (audioConfig_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AudioConfig);
    }
    if (microphoneConfig_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MicrophoneConfig);
    }
    if (HasControllerOverlayOpened) {
      output.WriteRawTag(32);
      output.WriteBool(ControllerOverlayOpened);
    }
    if (HasMenubarOverlayOpened) {
      output.WriteRawTag(40);
      output.WriteBool(MenubarOverlayOpened);
    }
    if (HasMenubarOverlayHotkey) {
      output.WriteRawTag(48);
      output.WriteUInt32(MenubarOverlayHotkey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (audioConfig_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioConfig);
    }
    if (microphoneConfig_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MicrophoneConfig);
    }
    if (HasControllerOverlayOpened) {
      size += 1 + 1;
    }
    if (HasMenubarOverlayOpened) {
      size += 1 + 1;
    }
    if (HasMenubarOverlayHotkey) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MenubarOverlayHotkey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CStreamPlayerConfig other) {
    if (other == null) {
      return;
    }
    if (other.audioConfig_ != null) {
      if (audioConfig_ == null) {
        AudioConfig = new global::CStreamPlayerConfig.Types.CAudioConfig();
      }
      AudioConfig.MergeFrom(other.AudioConfig);
    }
    if (other.microphoneConfig_ != null) {
      if (microphoneConfig_ == null) {
        MicrophoneConfig = new global::CStreamPlayerConfig.Types.CAudioConfig();
      }
      MicrophoneConfig.MergeFrom(other.MicrophoneConfig);
    }
    if (other.HasControllerOverlayOpened) {
      ControllerOverlayOpened = other.ControllerOverlayOpened;
    }
    if (other.HasMenubarOverlayOpened) {
      MenubarOverlayOpened = other.MenubarOverlayOpened;
    }
    if (other.HasMenubarOverlayHotkey) {
      MenubarOverlayHotkey = other.MenubarOverlayHotkey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (audioConfig_ == null) {
            AudioConfig = new global::CStreamPlayerConfig.Types.CAudioConfig();
          }
          input.ReadMessage(AudioConfig);
          break;
        }
        case 18: {
          if (microphoneConfig_ == null) {
            MicrophoneConfig = new global::CStreamPlayerConfig.Types.CAudioConfig();
          }
          input.ReadMessage(MicrophoneConfig);
          break;
        }
        case 32: {
          ControllerOverlayOpened = input.ReadBool();
          break;
        }
        case 40: {
          MenubarOverlayOpened = input.ReadBool();
          break;
        }
        case 48: {
          MenubarOverlayHotkey = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (audioConfig_ == null) {
            AudioConfig = new global::CStreamPlayerConfig.Types.CAudioConfig();
          }
          input.ReadMessage(AudioConfig);
          break;
        }
        case 18: {
          if (microphoneConfig_ == null) {
            MicrophoneConfig = new global::CStreamPlayerConfig.Types.CAudioConfig();
          }
          input.ReadMessage(MicrophoneConfig);
          break;
        }
        case 32: {
          ControllerOverlayOpened = input.ReadBool();
          break;
        }
        case 40: {
          MenubarOverlayOpened = input.ReadBool();
          break;
        }
        case 48: {
          MenubarOverlayHotkey = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CStreamPlayerConfig message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class CAudioConfig : pb::IMessage<CAudioConfig>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<CAudioConfig> _parser = new pb::MessageParser<CAudioConfig>(() => new CAudioConfig());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<CAudioConfig> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CStreamPlayerConfig.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CAudioConfig() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CAudioConfig(CAudioConfig other) : this() {
        _hasBits0 = other._hasBits0;
        volume_ = other.volume_;
        mute_ = other.mute_;
        boost_ = other.boost_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CAudioConfig Clone() {
        return new CAudioConfig(this);
      }

      /// <summary>Field number for the "volume" field.</summary>
      public const int VolumeFieldNumber = 1;
      private readonly static float VolumeDefaultValue = 1F;

      private float volume_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public float Volume {
        get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return VolumeDefaultValue; } }
        set {
          _hasBits0 |= 1;
          volume_ = value;
        }
      }
      /// <summary>Gets whether the "volume" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVolume {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "volume" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVolume() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "mute" field.</summary>
      public const int MuteFieldNumber = 2;
      private readonly static bool MuteDefaultValue = false;

      private bool mute_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Mute {
        get { if ((_hasBits0 & 2) != 0) { return mute_; } else { return MuteDefaultValue; } }
        set {
          _hasBits0 |= 2;
          mute_ = value;
        }
      }
      /// <summary>Gets whether the "mute" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMute {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "mute" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMute() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "boost" field.</summary>
      public const int BoostFieldNumber = 3;
      private readonly static bool BoostDefaultValue = false;

      private bool boost_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Boost {
        get { if ((_hasBits0 & 4) != 0) { return boost_; } else { return BoostDefaultValue; } }
        set {
          _hasBits0 |= 4;
          boost_ = value;
        }
      }
      /// <summary>Gets whether the "boost" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBoost {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "boost" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBoost() {
        _hasBits0 &= ~4;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as CAudioConfig);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(CAudioConfig other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
        if (Mute != other.Mute) return false;
        if (Boost != other.Boost) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
        if (HasMute) hash ^= Mute.GetHashCode();
        if (HasBoost) hash ^= Boost.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasVolume) {
          output.WriteRawTag(13);
          output.WriteFloat(Volume);
        }
        if (HasMute) {
          output.WriteRawTag(16);
          output.WriteBool(Mute);
        }
        if (HasBoost) {
          output.WriteRawTag(24);
          output.WriteBool(Boost);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasVolume) {
          output.WriteRawTag(13);
          output.WriteFloat(Volume);
        }
        if (HasMute) {
          output.WriteRawTag(16);
          output.WriteBool(Mute);
        }
        if (HasBoost) {
          output.WriteRawTag(24);
          output.WriteBool(Boost);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasVolume) {
          size += 1 + 4;
        }
        if (HasMute) {
          size += 1 + 1;
        }
        if (HasBoost) {
          size += 1 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(CAudioConfig other) {
        if (other == null) {
          return;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasMute) {
          Mute = other.Mute;
        }
        if (other.HasBoost) {
          Boost = other.Boost;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Volume = input.ReadFloat();
              break;
            }
            case 16: {
              Mute = input.ReadBool();
              break;
            }
            case 24: {
              Boost = input.ReadBool();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              Volume = input.ReadFloat();
              break;
            }
            case 16: {
              Mute = input.ReadBool();
              break;
            }
            case 24: {
              Boost = input.ReadBool();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
